python manage.py shell
from news.models import *

1. Создать двух пользователей

user1 = User.objects.create_user(username='John')
user2 = User.objects.create_user(username='Bob')

2. Создать два объекта модели Author, связанные с пользователями.

author1 = Author.objects.create(authorUser=user1)
author2 = Author.objects.create(authorUser=user2)

3. Добавить 4 категории в модель Category.

category1 = Category.objects.create(name='Политика')
category2 = Category.objects.create(name='ИТ')
category3 = Category.objects.create(name='Спорт')
category4 = Category.objects.create(name='Культура')

4. Добавить 2 статьи и 1 новость.

post1 = Post.objects.create(author=author1, title='Первая статья', text='Текст первой статьи')
post2 = Post.objects.create(author=author1, title='Вторая статья', text='Текст второй статьи')
post3 = Post.objects.create(author=author2, categoryType=Post.NEWS, title='Новость', text='Текст новости')

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

post1.postCategory.add(category1)
post2.postCategory.add(category2, category4)
post3.postCategory.add(category3)

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

comment1 = Comment.objects.create(commentUser=User.objects.get(username='Bob'), commentPost= Post.objects.get(pk=1), text='some comment from Bob on first post')
comment2 = Comment.objects.create(commentUser=User.objects.get(username='John'), commentPost= Post.objects.get(pk=2), text='some comment from  John on second post')
comment3 = Comment.objects.create(commentUser=User.objects.get(username='Bob'), commentPost= Post.objects.get(pk=3), text='some comment from Bob on third post')
comment4 = Comment.objects.create(commentUser=User.objects.get(username='John'), commentPost= Post.objects.get(pk=1), text='some comment from  John on first post')

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

post1.like()
post1.like()
post1.like()
post1.like()
post1.dislike()
post2.dislike()
post2.like()
post2.like()
post3.like()
post3.like()
post3.like()
post3.dislike()

comment1.like()
comment2.dislike()
comment3.like()
comment4.like()
comment4.like()

8. Обновить рейтинги пользователей.

author1.update_rating()
author2.update_rating()

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

best_author = Author.objects.all().order_by('-ratingAuthor').first()
print(f"Лучший пользователь: {best_author.authorUser.username}, рейтинг: {best_author.ratingAuthor}")

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

best_post = Post.objects.all().order_by('-rating').first()
print(f"Лучшая статья:")
print(f"Дата добавления: {best_post.dataCreation}")
print(f"Автор: {best_post.author.authorUser.username}")
print(f"Рейтинг: {best_post.rating}")
print(f"Заголовок: {best_post.title}")
print(f"Превью: {best_post.preview()}")

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

comments = Comment.objects.filter(commentPost=best_post).order_by('-date')
for comment in comments:
    print(f"Дата: {comment.date}")
    print(f"Пользователь: {comment.commentUser.username}")
    print(f"Рейтинг: {comment.rating}")
    print(f"Текст: {comment.text}")
    print("---")